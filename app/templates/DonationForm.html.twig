{#
 This is a template "page" for developing the form page.
 Try with the url path `/page/DonationForm.html.twig` (yes, with that suffix)

 TODO Remove this when JavaScript works.
#}
<!-- <html> -->

<div id="validation-errors" class="errorbox" style="display: none">
    <strong>Bei der Prüfung Ihrer Eingaben wurden Probleme bemerkt</strong>.
    Bitte überprüfen Sie Ihre Angaben in folgenden Feldern: <strong class="fields">keine</strong>
</div>

<div id="paymentPage">
    {% include 'Form1.html.twig' %}
</div>

<div id="personalDataPage">
    {% include 'Form2.html.twig' %}
</div>

<div id="bankConfirmationPage">
    TODO
</div>

<script>

    // The following line is a Twig template placeholder to generate initial values (defaults to empty object)
    var initialFormValues = {% if initialFormValues %}{$ initialFormValues|json_encode|raw $}{% else %}{}{% endif %};

    // Initialize the form
    $( function () {
        var store = WMDE.Store,
            actions = WMDE.Actions;

        WMDE.StoreUpdates.connectComponentsToStore(
            [
                WMDE.Components.createRadioComponent( store, $( '.payment-type-select' ), 'paymentType' ),
                WMDE.Components.createRadioComponent( store, $( '.interval-type-select' ), 'paymentPeriodInMonths' ),
                WMDE.Components.createRadioComponent( store, $( '.payment-period-select' ), 'paymentPeriodInMonths' )
            ],
            store
        );

        WMDE.StoreUpdates.connectValidatorsToStore(
            function ( initialValues ) {
                return [
                    WMDE.ReduxValidation.createValidationDispatcher(
                            WMDE.FormValidation.createAmountValidator( '{$ basepath $}/validate-amount' ),
                            actions.newFinishAmountValidationAction,
                            [ 'amount', 'paymentType' ],
                            initialValues
                    )
                ];
            },
            store,
            initialFormValues
        );

        // Connect view handlers to changes in specific parts in the global state, designated by 'stateKey'
        WMDE.StoreUpdates.connectViewHandlersToStore(
                [
                    {
                        viewHandler: WMDE.View.createFormPageVisibilityHandler( {
                            payment: $( "#paymentPage" ),
                            personalData: $( "#personalDataPage" ),
                            bankConfirmation: $( '#bankConfirmationPage' )
                        } ),
                        stateKey: 'formPagination'
                    },
                    {
                        viewHandler: WMDE.View.createClearAmountHandler( $( '.amount-select' ), $( '.amount-input' ) ),
                        stateKey: 'formContent'
                    },
                    {
                        viewHandler: WMDE.View.createErrorBoxHandler( $( '#validation-errors' ), { amount: 'Betrag' } ),
                        stateKey: 'validationMessages'
                    },
                    {
                        viewHandler: WMDE.View.createElementSliderHandler( $( '.periode-2-list' ), /^(1|3|6|12)$/ ),
                        stateKey: 'formContent.paymentPeriodInMonths'
                    },
                    {
                        viewHandler: WMDE.View.createElementSliderHandler( $( '#bank-data' ), 'BEZ' ),
                        stateKey: 'formContent.paymentType'
                    }
                ],
                store
        );

        // connect DOM elements to actions

        // we can't put amount selection into a component because we need to distinguish between
        // selected and custom amount in the state
        $( '.amount-select' ).change( function( evt ) {
            store.dispatch( actions.newSelectAmountAction( evt.target.value ) );
        } );

        $( '.amount-input' ).change( function( evt ) {
            store.dispatch( actions.newInputAmountAction( evt.target.value ) );
        } ).focus( function( evt ) {
            // This method will clear the selection (important for usability),
            // but keep the form data valid when the custom amount field is empty
            var newAmount;
            if ( evt.target.value ) {
                newAmount = evt.target.value;
            }
            else {
                newAmount = $( '.amount-select:checked' ).val();
            }
            store.dispatch( actions.newInputAmountAction( newAmount) );
        } ).blur( function( evt ) {
            // When the custom amount field is empty, simulate a selection to restore previous selection
            if ( !evt.target.value ) {
                store.dispatch( actions.newSelectAmountAction( null ) );
            }
        } );

        $( '#donation-submit1 button' ).click( function () {
            store.dispatch( actions.newNextPageAction() );
        } );


        // Initialize form pages
        store.dispatch( actions.newAddPageAction( 'payment' ) );
        store.dispatch( actions.newAddPageAction( 'personalData' ) );
        store.dispatch( actions.newAddPageAction( 'bankConfirmation' ) );

        // Set initial form values
        store.dispatch( actions.newInitializeContentAction( initialFormValues ) );

    } );
</script>

<!-- TODO
<div class="wlightbox-contents">
    <div id="wlightbox-wohin-geht-das-geld">
</html>{{Web:Spendenseite-HK2013/rewrite/10h16_Lightbox_Wohin_geht_das_Geld}}<html>
</div>
<div id="wlightbox-steuerlich-absetzbar">
</html>{{Web:Spendenseite-HK2013/rewrite/10h16_Lightbox_Steuer}}<html>
</div>
<div id="wlightbox-bitcoin">
</html>{{Web:Spendenseite-HK2013/rewrite/10h16_Lightbox_BitCoin}}<html>
</div>
<div id="wlightbox-spendenkommentare"></html>{{Web:Spendenseite-HK2013/rewrite/10h16_Lightbox_Spendenkommentare}}<html></div>

</div>
</html>{{Web:Spendenseite-HK2013/rewrite/Bank Detail Banner}}<html>
</html>
-->